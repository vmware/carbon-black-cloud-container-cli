package image

import (
	"fmt"
	"sort"
	"strings"

	"github.com/gookit/color"
)

const (
	// SeverityCritical is a supported severity.
	SeverityCritical = "CRITICAL"
	// SeverityHigh is a supported severity.
	SeverityHigh = "HIGH"
	// SeverityMedium is a supported severity.
	SeverityMedium = "MEDIUM"
	// SeverityLow is a supported severity.
	SeverityLow = "LOW"
	// SeverityUnknown is a supported severity.
	SeverityUnknown = "UNKNOWN"

	emptyFix = ""
)

// Vulnerability denotes the vulnerability items.
type Vulnerability struct {
	ID           string   `json:"id" ,xml:"id"`
	Package      string   `json:"package" ,xml:"package"`
	Name         string   `json:"package_name" ,xml:"package_name"`
	Version      string   `json:"package_version" ,xml:"package_version"`
	Type         string   `json:"package_type" ,xml:"package_type"`
	Severity     string   `json:"severity" ,xml:"severity"`
	Link         string   `json:"link,omitempty" ,xml:"link,omitempty"`
	Description  string   `json:"description,omitempty" ,xml:"description,omitempty"`
	FixAvailable string   `json:"fix_available" ,xml:"fix_available"`
	Cvss         CvssItem `json:"cvss" ,xml:"cvss"`
}

// CvssItem denotes CVSS score.
type CvssItem struct {
	V2 float32 `json:"v2"`
	V3 float32 `json:"v3"`
}

// GetID return the ID of the vulnerability.
func (v Vulnerability) GetID() string {
	return v.ID
}

// GetPackage return the Package of the vulnerability.
func (v Vulnerability) GetPackage() string {
	return v.Package
}

// GetType return the Type of the vulnerability.
func (v Vulnerability) GetType() string {
	return v.Type
}

// GetSeverity return the Severity of the vulnerability.
func (v Vulnerability) GetSeverity() string {
	return v.colorizeSeverity()
}

// GetFixAvailable return the FixAvailable of the vulnerability.
func (v Vulnerability) GetFixAvailable() string {
	return v.FixAvailable
}

// GetCvssV2 return the Cvss.V2 of the vulnerability.
func (v Vulnerability) GetCvssV2() string {
	return fmt.Sprintf("%.1f", v.Cvss.V2)
}

// GetCvssV3 return the Cvss.V3 of the vulnerability.
func (v Vulnerability) GetCvssV3() string {
	return fmt.Sprintf("%.1f", v.Cvss.V3)
}

// colorizeSeverity will color the severity table item according the severity type.
func (v Vulnerability) colorizeSeverity() string {
	severity := strings.ToUpper(v.Severity)

	switch severity {
	case SeverityCritical:
		return color.Red.Sprint(severity)
	case SeverityHigh:
		return color.LightRed.Sprint(severity)
	case SeverityMedium:
		return color.Yellow.Sprint(severity)
	case SeverityLow:
		return color.Blue.Sprint(severity)
	case SeverityUnknown:
		fallthrough
	default:
		return severity
	}
}

func sortVulnerabilitiesBySeverities(vulnerabilities []Vulnerability) {
	level := map[string]int{
		SeverityCritical: 0,
		SeverityHigh:     1,
		SeverityMedium:   2,
		SeverityLow:      3,
		SeverityUnknown:  4,
	}

	sort.Slice(vulnerabilities, func(i, j int) bool {
		si := strings.ToUpper(vulnerabilities[i].Severity)
		sj := strings.ToUpper(vulnerabilities[j].Severity)

		if level[si] == level[sj] {
			return vulnerabilities[i].FixAvailable != emptyFix
		}

		return level[si] < level[sj]
	})
}
